// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`qdk/readme sample > builds a readme sample project 1`] = `
"/
├─ .gitignore
├─ .prettierrc
├─ .qdk/
│  ├─ meta.json
│  └─ tree.txt
├─ eslint.config.js
├─ package.json
├─ src/
│  ├─ config.json
│  └─ index.ts
├─ test/
│  └─ index.spec.ts
└─ tsconfig.json"
`;

exports[`qdk/readme sample > builds a readme sample project 2`] = `
{
  "/.gitignore": "
### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit
",
  "/.prettierrc": "{
  "arrowParens": "avoid",
  "singleQuote": true,
  "overrides": [],
  "plugins": ["prettier-plugin-organize-imports"]
}
",
  "/.qdk/meta.json": "{
  "project": "qdk-sample",
  "custom": {},
  "files": [
    "./.gitignore",
    "./.prettierrc",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./eslint.config.js",
    "./package.json",
    "./tsconfig.json"
  ]
}
",
  "/.qdk/tree.txt": "·
└── Project(qdk-sample)
    ├── Gitignore
    │   └── TextFile(.gitignore)
    ├── JsonFile(.qdk/meta.json)
    ├── NpmPackageManager
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── Typescript(^5.6.2)
    │   └── TsConfig
    │       └── JsonFile(tsconfig.json)
    ├── EsLint
    │   ├── Prettier
    │   │   └── JsonFile(.prettierrc)
    │   └── TemplateFile(eslint.config.js)
    └── MySampleFiles
        └── SampleFiles(SampleFiles)
            ├── TextFile(src/index.ts)
            ├── JsonFile(src/config.json)
            └── TextFile(test/index.spec.ts)",
  "/eslint.config.js": "import globals from 'globals';
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';
export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,
  eslintPluginPrettierRecommended,
  { files: ['eslint.config.js', 'src/**/*.ts', 'test/**/*.ts'] },
  { ignores: ['dist/**/*'] },
  { languageOptions: { globals: globals.nodeBuiltin } },
  {
    languageOptions: {
      parserOptions: {
        projectService: { allowDefaultProject: ['*.config.{mjs,js}'] },
      },
    },
  },
  { rules: { '@typescript-eslint/no-unsafe-call': 'off' } },
  {
    languageOptions: {
      parserOptions: { tsconfigRootDir: import.meta.dirname },
    },
  },
);
",
  "/package.json": "{
  "name": "qdk-sample",
  "version": "0.1.0",
  "description": "Sample QDK Project",
  "license": "MIT",
  "type": "module",
  "module": "dist/src/index.js",
  "scripts": {
    "eslint": "eslint",
    "eslint:fix": "eslint --fix",
    "format": "prettier . --write",
    "qdk": "qdk synth",
    "qdk:check": "qdk synth --check",
    "test": "vitest",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "devDependencies": {
    "@eslint/js": "^9.12.0",
    "@tsconfig/node20": "^20.1.4",
    "eslint": "^9.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "globals": "^15.11.0",
    "prettier": "^3.0.0",
    "prettier-plugin-organize-imports": "^4.1.0",
    "qdk": "9.9.9-mock-latest",
    "typescript": "^5.6.2",
    "typescript-eslint": "^8.9.0",
    "vitest": "9.9.9-mock-latest"
  },
  "readme": "ERROR: No README data found!",
  "_id": "qdk-sample@0.1.0"
}
",
  "/src/config.json": "{
  "name": "Alice 2024-10-06T20:57:10.606Z"
}
",
  "/src/index.ts": "import { name } from './config.json';

export const sayHello = () => 'Hello ' + name;
",
  "/test/index.spec.ts": "import { describe, expect, it } from 'vitest';
import { sayHello } from '../src/index.js';

describe('index', () => {
  it('say hello', () => {
    // When
    const result = sayHello();
    // Then
    expect(result).toMatch(/^Hello Alice .+$/g);
  });
});
",
  "/tsconfig.json": "{
  "extends": ["@tsconfig/node20"],
  "include": [
    "qdk.config.ts",
    "eslint.config.mjs",
    "src/**/*.ts",
    "test/**/*.ts",
    "qdk.config.ts",
    "qdk/**/*.ts"
  ],
  "compilerOptions": {
    "outDir": "dist",
    "strictNullChecks": true,
    "resolveJsonModule": true
  }
}
",
}
`;

exports[`qdk/readme sample > builds a readme sample project and delete orphan files 1`] = `
"/
├─ .gitignore
├─ .prettierrc
├─ .qdk/
│  ├─ meta.json
│  └─ tree.txt
├─ build/
│  └─ readme/
│     ├─ .qdk/
│     │  └─ meta.json
│     └─ orphan.txt
├─ eslint.config.js
├─ package.json
├─ src/
│  ├─ config.json
│  └─ index.ts
├─ test/
│  └─ index.spec.ts
└─ tsconfig.json"
`;

exports[`qdk/readme sample > builds a readme sample project and delete orphan files 2`] = `
{
  "/.gitignore": "
### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit
",
  "/.prettierrc": "{
  "arrowParens": "avoid",
  "singleQuote": true,
  "overrides": [],
  "plugins": ["prettier-plugin-organize-imports"]
}
",
  "/.qdk/meta.json": "{
  "project": "qdk-sample",
  "custom": {},
  "files": [
    "./.gitignore",
    "./.prettierrc",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./eslint.config.js",
    "./package.json",
    "./tsconfig.json"
  ]
}
",
  "/.qdk/tree.txt": "·
└── Project(qdk-sample)
    ├── Gitignore
    │   └── TextFile(.gitignore)
    ├── JsonFile(.qdk/meta.json)
    ├── NpmPackageManager
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── Typescript(^5.6.2)
    │   └── TsConfig
    │       └── JsonFile(tsconfig.json)
    ├── EsLint
    │   ├── Prettier
    │   │   └── JsonFile(.prettierrc)
    │   └── TemplateFile(eslint.config.js)
    └── MySampleFiles
        └── SampleFiles(SampleFiles)
            ├── TextFile(src/index.ts)
            ├── JsonFile(src/config.json)
            └── TextFile(test/index.spec.ts)",
  "/build/readme/.qdk/meta.json": "{"files":[".qdk/meta.json","./orphan.txt"]}",
  "/build/readme/orphan.txt": "some file data",
  "/eslint.config.js": "import globals from 'globals';
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';
export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,
  eslintPluginPrettierRecommended,
  { files: ['eslint.config.js', 'src/**/*.ts', 'test/**/*.ts'] },
  { ignores: ['dist/**/*'] },
  { languageOptions: { globals: globals.nodeBuiltin } },
  {
    languageOptions: {
      parserOptions: {
        projectService: { allowDefaultProject: ['*.config.{mjs,js}'] },
      },
    },
  },
  { rules: { '@typescript-eslint/no-unsafe-call': 'off' } },
  {
    languageOptions: {
      parserOptions: { tsconfigRootDir: import.meta.dirname },
    },
  },
);
",
  "/package.json": "{
  "name": "qdk-sample",
  "version": "0.1.0",
  "description": "Sample QDK Project",
  "license": "MIT",
  "type": "module",
  "module": "dist/src/index.js",
  "scripts": {
    "eslint": "eslint",
    "eslint:fix": "eslint --fix",
    "format": "prettier . --write",
    "qdk": "qdk synth",
    "qdk:check": "qdk synth --check",
    "test": "vitest",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "devDependencies": {
    "@eslint/js": "^9.12.0",
    "@tsconfig/node20": "^20.1.4",
    "eslint": "^9.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "globals": "^15.11.0",
    "prettier": "^3.0.0",
    "prettier-plugin-organize-imports": "^4.1.0",
    "qdk": "9.9.9-mock-latest",
    "typescript": "^5.6.2",
    "typescript-eslint": "^8.9.0",
    "vitest": "9.9.9-mock-latest"
  },
  "readme": "ERROR: No README data found!",
  "_id": "qdk-sample@0.1.0"
}
",
  "/src/config.json": "{
  "name": "Alice 2024-10-06T20:57:10.606Z"
}
",
  "/src/index.ts": "import { name } from './config.json';

export const sayHello = () => 'Hello ' + name;
",
  "/test/index.spec.ts": "import { describe, expect, it } from 'vitest';
import { sayHello } from '../src/index.js';

describe('index', () => {
  it('say hello', () => {
    // When
    const result = sayHello();
    // Then
    expect(result).toMatch(/^Hello Alice .+$/g);
  });
});
",
  "/tsconfig.json": "{
  "extends": ["@tsconfig/node20"],
  "include": [
    "qdk.config.ts",
    "eslint.config.mjs",
    "src/**/*.ts",
    "test/**/*.ts",
    "qdk.config.ts",
    "qdk/**/*.ts"
  ],
  "compilerOptions": {
    "outDir": "dist",
    "strictNullChecks": true,
    "resolveJsonModule": true
  }
}
",
}
`;
