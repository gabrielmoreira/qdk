// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`qdk/monorepo sample > builds a monorepo sample project 1`] = `
"/
└─ build/
   └─ monorepo/
      ├─ .gitignore
      ├─ .qdk/
      │  ├─ meta.json
      │  └─ tree.txt
      ├─ package.json
      ├─ pnpm-workspace.yaml
      ├─ services/
      │  └─ simple/
      │     ├─ .prettierrc
      │     ├─ .qdk/
      │     │  ├─ meta.json
      │     │  └─ tree.txt
      │     ├─ README.md
      │     ├─ eslint.config.js
      │     ├─ package.json
      │     ├─ src/
      │     │  └─ index.ts
      │     └─ tsconfig.json
      ├─ src/
      │  └─ index.ts
      └─ tsconfig.json"
`;

exports[`qdk/monorepo sample > builds a monorepo sample project 2`] = `
{
  "/build/monorepo/.gitignore": "
### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit
",
  "/build/monorepo/.qdk/meta.json": "{
  "project": "monorepo",
  "custom": {},
  "files": [
    "./.gitignore",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./pnpm-workspace.yaml",
    "./tsconfig.json"
  ]
}
",
  "/build/monorepo/.qdk/tree.txt": "·
└── Project(monorepo)
    ├── Gitignore
    │   └── TextFile(.gitignore)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(^9.12.0)
    │   └── PnpmWorkspace
    │       └── YamlFile(pnpm-workspace.yaml)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── Typescript(^5.6.2)
    │   └── TsConfig
    │       └── JsonFile(tsconfig.json)
    ├── Project(simple)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(^9.12.0)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── Typescript(^5.6.2)
    │   │   └── TsConfig
    │   │       └── JsonFile(tsconfig.json)
    │   ├── EsLint
    │   │   ├── Prettier
    │   │   │   └── JsonFile(.prettierrc)
    │   │   └── TemplateFile(eslint.config.js)
    │   ├── TextFile(README.md)
    │   ├── Pkgroll
    │   ├── TextFile(src/index.ts)
    │   └── TextFile(.qdk/tree.txt)
    ├── Pkgroll
    └── TextFile(src/index.ts)",
  "/build/monorepo/package.json": "{
  "name": "monorepo",
  "version": "0.1.0",
  "type": "module",
  "exports": {
    "require": {
      "types": "./dist/index.d.cts",
      "default": "./dist/index.cjs"
    },
    "import": {
      "types": "./dist/index.d.mts",
      "default": "./dist/index.mjs"
    }
  },
  "main": "./dist/index.cjs",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.cts",
  "scripts": {
    "build": "pkgroll",
    "qdk": "qdk synth",
    "qdk:check": "qdk synth --check",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "dependencies": {
    "simple": "workspace:*"
  },
  "devDependencies": {
    "@tsconfig/node20": "^1.0.0",
    "pkgroll": "9.9.9-mock-latest",
    "qdk": "9.9.9-mock-latest",
    "typescript": "^5.6.2"
  },
  "engine": {
    "pnpm": "^9.12.0"
  },
  "readme": "ERROR: No README data found!",
  "_id": "monorepo@0.1.0"
}
",
  "/build/monorepo/pnpm-workspace.yaml": "packages:
  - services/simple
",
  "/build/monorepo/services/simple/.prettierrc": "{
  "arrowParens": "avoid",
  "singleQuote": true,
  "overrides": [],
  "plugins": ["prettier-plugin-organize-imports"]
}
",
  "/build/monorepo/services/simple/.qdk/meta.json": "{
  "project": "simple",
  "custom": {},
  "files": [
    "./.prettierrc",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./eslint.config.js",
    "./package.json",
    "./tsconfig.json"
  ]
}
",
  "/build/monorepo/services/simple/.qdk/tree.txt": "·
└── Project(simple)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(^9.12.0)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── Typescript(^5.6.2)
    │   └── TsConfig
    │       └── JsonFile(tsconfig.json)
    ├── EsLint
    │   ├── Prettier
    │   │   └── JsonFile(.prettierrc)
    │   └── TemplateFile(eslint.config.js)
    ├── TextFile(README.md)
    ├── Pkgroll
    └── TextFile(src/index.ts)",
  "/build/monorepo/services/simple/README.md": "123
",
  "/build/monorepo/services/simple/eslint.config.js": "import globals from 'globals';
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';
export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,
  eslintPluginPrettierRecommended,
  { files: ['eslint.config.js', 'src/**/*.ts', 'test/**/*.ts'] },
  { ignores: ['dist/**/*'] },
  { languageOptions: { globals: globals.nodeBuiltin } },
  {
    languageOptions: {
      parserOptions: {
        projectService: { allowDefaultProject: ['*.config.{mjs,js}'] },
      },
    },
  },
  { rules: {} },
  {
    languageOptions: {
      parserOptions: { tsconfigRootDir: import.meta.dirname },
    },
  },
);
",
  "/build/monorepo/services/simple/package.json": "{
  "name": "simple",
  "version": "0.1.0",
  "type": "module",
  "exports": {
    "require": {
      "types": "./dist/index.d.cts",
      "default": "./dist/index.cjs"
    },
    "import": {
      "types": "./dist/index.d.mts",
      "default": "./dist/index.mjs"
    }
  },
  "main": "./dist/index.cjs",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.cts",
  "scripts": {
    "build": "pkgroll",
    "eslint": "eslint",
    "eslint:fix": "eslint --fix",
    "format": "prettier . --write",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "devDependencies": {
    "@eslint/js": "^9.12.0",
    "@tsconfig/node20": "^20.1.4",
    "eslint": "^9.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "globals": "^15.11.0",
    "pkgroll": "9.9.9-mock-latest",
    "prettier": "^3.0.0",
    "prettier-plugin-organize-imports": "^4.1.0",
    "typescript": "^5.6.2",
    "typescript-eslint": "^8.9.0"
  },
  "engine": {
    "pnpm": "^9.12.0"
  },
  "readme": "ERROR: No README data found!",
  "_id": "simple@0.1.0"
}
",
  "/build/monorepo/services/simple/src/index.ts": "export const B = 'B';
",
  "/build/monorepo/services/simple/tsconfig.json": "{
  "extends": ["@tsconfig/node20"],
  "include": ["src/**/*", "tests/**/*"]
}
",
  "/build/monorepo/src/index.ts": "export type A = 'a';
export const a = 'a' satisfies A;
import { B } from 'simple';
console.log(B);
",
  "/build/monorepo/tsconfig.json": "{
  "extends": ["@tsconfig/node20"],
  "include": ["src/**/*", "tests/**/*"]
}
",
}
`;

exports[`qdk/monorepo sample > builds a monorepo sample project and delete orphan files 1`] = `
"/
└─ build/
   └─ monorepo/
      ├─ .gitignore
      ├─ .qdk/
      │  ├─ meta.json
      │  └─ tree.txt
      ├─ orphan.txt
      ├─ package.json
      ├─ pnpm-workspace.yaml
      ├─ services/
      │  └─ simple/
      │     ├─ .prettierrc
      │     ├─ .qdk/
      │     │  ├─ meta.json
      │     │  └─ tree.txt
      │     ├─ README.md
      │     ├─ eslint.config.js
      │     ├─ package.json
      │     ├─ src/
      │     │  └─ index.ts
      │     └─ tsconfig.json
      ├─ src/
      │  └─ index.ts
      └─ tsconfig.json"
`;

exports[`qdk/monorepo sample > builds a monorepo sample project and delete orphan files 2`] = `
{
  "/build/monorepo/.gitignore": "
### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit
",
  "/build/monorepo/.qdk/meta.json": "{
  "project": "monorepo",
  "custom": {},
  "files": [
    "./.gitignore",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./pnpm-workspace.yaml",
    "./tsconfig.json"
  ]
}
",
  "/build/monorepo/.qdk/tree.txt": "·
└── Project(monorepo)
    ├── Gitignore
    │   └── TextFile(.gitignore)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(^9.12.0)
    │   └── PnpmWorkspace
    │       └── YamlFile(pnpm-workspace.yaml)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── Typescript(^5.6.2)
    │   └── TsConfig
    │       └── JsonFile(tsconfig.json)
    ├── Project(simple)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(^9.12.0)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── Typescript(^5.6.2)
    │   │   └── TsConfig
    │   │       └── JsonFile(tsconfig.json)
    │   ├── EsLint
    │   │   ├── Prettier
    │   │   │   └── JsonFile(.prettierrc)
    │   │   └── TemplateFile(eslint.config.js)
    │   ├── TextFile(README.md)
    │   ├── Pkgroll
    │   ├── TextFile(src/index.ts)
    │   └── TextFile(.qdk/tree.txt)
    ├── Pkgroll
    └── TextFile(src/index.ts)",
  "/build/monorepo/orphan.txt": "some file data",
  "/build/monorepo/package.json": "{
  "name": "monorepo",
  "version": "0.2.0-buildsamonoreposampleprojectanddeleteorphanfiles",
  "exports": {
    "require": {
      "types": "./dist/index.d.cts",
      "default": "./dist/index.cjs"
    },
    "import": {
      "types": "./dist/index.d.mts",
      "default": "./dist/index.mjs"
    }
  },
  "main": "./dist/index.cjs",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.cts",
  "scripts": {
    "build": "pkgroll",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "dependencies": {
    "simple": "workspace:*"
  },
  "devDependencies": {
    "@tsconfig/node20": "^1.0.0",
    "pkgroll": "9.9.9-mock-latest",
    "typescript": "^5.6.2"
  },
  "engine": {
    "pnpm": "^9.12.0"
  },
  "readme": "ERROR: No README data found!",
  "_id": "monorepo@0.2.0-buildsamonoreposampleprojectanddeleteorphanfiles"
}
",
  "/build/monorepo/pnpm-workspace.yaml": "packages:
  - services/simple
",
  "/build/monorepo/services/simple/.prettierrc": "{
  "arrowParens": "avoid",
  "singleQuote": true,
  "overrides": [],
  "plugins": ["prettier-plugin-organize-imports"]
}
",
  "/build/monorepo/services/simple/.qdk/meta.json": "{
  "project": "simple",
  "custom": {},
  "files": [
    "./.prettierrc",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./eslint.config.js",
    "./package.json",
    "./tsconfig.json"
  ]
}
",
  "/build/monorepo/services/simple/.qdk/tree.txt": "·
└── Project(simple)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(^9.12.0)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── Typescript(^5.6.2)
    │   └── TsConfig
    │       └── JsonFile(tsconfig.json)
    ├── EsLint
    │   ├── Prettier
    │   │   └── JsonFile(.prettierrc)
    │   └── TemplateFile(eslint.config.js)
    ├── TextFile(README.md)
    ├── Pkgroll
    └── TextFile(src/index.ts)",
  "/build/monorepo/services/simple/README.md": "123
",
  "/build/monorepo/services/simple/eslint.config.js": "import globals from 'globals';
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';
export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,
  eslintPluginPrettierRecommended,
  { files: ['eslint.config.js', 'src/**/*.ts', 'test/**/*.ts'] },
  { ignores: ['dist/**/*'] },
  { languageOptions: { globals: globals.nodeBuiltin } },
  {
    languageOptions: {
      parserOptions: {
        projectService: { allowDefaultProject: ['*.config.{mjs,js}'] },
      },
    },
  },
  { rules: {} },
  {
    languageOptions: {
      parserOptions: { tsconfigRootDir: import.meta.dirname },
    },
  },
);
",
  "/build/monorepo/services/simple/package.json": "{
  "name": "simple",
  "version": "0.2.0-buildsamonoreposampleprojectanddeleteorphanfiles",
  "exports": {
    "require": {
      "types": "./dist/index.d.cts",
      "default": "./dist/index.cjs"
    },
    "import": {
      "types": "./dist/index.d.mts",
      "default": "./dist/index.mjs"
    }
  },
  "main": "./dist/index.cjs",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.cts",
  "scripts": {
    "build": "pkgroll",
    "eslint": "eslint",
    "eslint:fix": "eslint --fix",
    "format": "prettier . --write",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "devDependencies": {
    "@eslint/js": "^9.12.0",
    "@tsconfig/node20": "^20.1.4",
    "eslint": "^9.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "globals": "^15.11.0",
    "pkgroll": "9.9.9-mock-latest",
    "prettier": "^3.0.0",
    "prettier-plugin-organize-imports": "^4.1.0",
    "typescript": "^5.6.2",
    "typescript-eslint": "^8.9.0"
  },
  "engine": {
    "pnpm": "^9.12.0"
  },
  "readme": "ERROR: No README data found!",
  "_id": "simple@0.2.0-buildsamonoreposampleprojectanddeleteorphanfiles"
}
",
  "/build/monorepo/services/simple/src/index.ts": "export const B = 'B';
",
  "/build/monorepo/services/simple/tsconfig.json": "{
  "extends": ["@tsconfig/node20"],
  "include": ["src/**/*", "tests/**/*"]
}
",
  "/build/monorepo/src/index.ts": "export type A = 'a';
export const a = 'a' satisfies A;
import { B } from 'simple';
console.log(B);
",
  "/build/monorepo/tsconfig.json": "{
  "extends": ["@tsconfig/node20"],
  "include": ["src/**/*", "tests/**/*"]
}
",
}
`;
