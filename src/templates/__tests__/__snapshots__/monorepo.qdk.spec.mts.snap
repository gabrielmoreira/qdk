// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`monorepo template > synthetize a monorepo template 1`] = `
"/
├─ .gitignore
├─ .mise.toml
├─ .npmrc
├─ .qdk/
│  ├─ meta.json
│  └─ tree.txt
├─ apps/
│  └─ repo-myapp/
│     ├─ .qdk/
│     │  ├─ meta.json
│     │  └─ tree.txt
│     ├─ App.tsx
│     ├─ android/
│     │  ├─ app/
│     │  │  └─ build.gradle
│     │  └─ settings.gradle
│     ├─ app.json
│     ├─ metro.config.js
│     └─ package.json
├─ package.json
├─ packages/
│  ├─ repo-my-lib-a/
│  │  ├─ .qdk/
│  │  │  ├─ meta.json
│  │  │  └─ tree.txt
│  │  └─ package.json
│  ├─ repo-my-lib-b/
│  │  ├─ .qdk/
│  │  │  ├─ meta.json
│  │  │  └─ tree.txt
│  │  ├─ package.json
│  │  └─ tsconfig.json
│  ├─ repo-my-lib-c/
│  │  ├─ .qdk/
│  │  │  ├─ meta.json
│  │  │  └─ tree.txt
│  │  ├─ package.json
│  │  └─ tsconfig.json
│  └─ repo-react-native-multiply/
│     ├─ .qdk/
│     │  ├─ meta.json
│     │  └─ tree.txt
│     ├─ android/
│     │  ├─ build.gradle
│     │  ├─ gradle.properties
│     │  └─ src/
│     │     └─ main/
│     │        ├─ AndroidManifest.xml
│     │        ├─ AndroidManifestNew.xml
│     │        └─ java/
│     │           └─ com/
│     │              └─ example/
│     │                 └─ reactnativemultiply/
│     │                    ├─ ReactNativeMultiplyModule.kt
│     │                    └─ ReactNativeMultiplyPackage.kt
│     ├─ babel.config.js
│     ├─ ios/
│     │  ├─ ReactNativeMultiply-Bridging-Header.h
│     │  ├─ ReactNativeMultiply.mm
│     │  └─ ReactNativeMultiply.swift
│     ├─ package.json
│     ├─ react_native_multiply.podspec
│     ├─ src/
│     │  ├─ __tests__/
│     │  │  └─ index.test.tsx
│     │  └─ index.tsx
│     ├─ tsconfig.build.json
│     └─ tsconfig.json
├─ pnpm-workspace.yaml
├─ qdk/
│  └─ src/
│     └─ templates/
│        └─ monorepo/
│           └─ .qdk/
│              └─ components/
│                 └─ templates/
│                    ├─ react-native-library/
│                    │  ├─ <%=it.repoName%>.podspec.eta
│                    │  ├─ android/
│                    │  │  ├─ build.gradle.eta
│                    │  │  ├─ gradle.properties.eta
│                    │  │  └─ src/ (...)
│                    │  ├─ babel.config.js.eta
│                    │  ├─ ios/
│                    │  │  ├─ <%=it.moduleName%>-Bridging-Header.h.eta
│                    │  │  ├─ <%=it.moduleName%>.mm.eta
│                    │  │  └─ <%=it.moduleName%>.swift.eta
│                    │  ├─ package.json.eta
│                    │  ├─ src/
│                    │  │  ├─ __tests__/ (...)
│                    │  │  └─ index.tsx.eta
│                    │  ├─ tsconfig.build.json.eta
│                    │  └─ tsconfig.json.eta
│                    └─ templates.cts
└─ shared/
   └─ repo-tsconfig/
      ├─ .qdk/
      │  ├─ meta.json
      │  └─ tree.txt
      ├─ node.json
      ├─ package.json
      └─ react-native.json"
`;

exports[`monorepo template > synthetize a monorepo template 2`] = `
{
  "/.gitignore": "
### Node.js Standard ###
# Logs generated by Node.js and related tools
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data files (PID files, seeds, locks)
pids
*.pid
*.seed
*.pid.lock

# Dependency directories (Node.js and package managers)
node_modules/
jspm_packages/
web_modules/ # Snowpack (https://snowpack.dev/)

# Build outputs and binary addons (https://nodejs.org/api/addons.html)
build/Release
.lock-wscript

# Coverage files used by testing tools like Istanbul/nyc
coverage/
*.lcov
.nyc_output

# Cache directories
.npm
.cache
.parcel-cache # Parcel (https://parceljs.org/)
.eslintcache # ESLint
.stylelintcache # Stylelint
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# TypeScript cache
*.tsbuildinfo

# Yarn Integrity file
.yarn-integrity

# REPL history
.node_repl_history

# Output from 'npm pack'
*.tgz

### Environment Variables ###
# dotenv environment variable files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

### Framework-specific Build Outputs ###
# Next.js (https://nextjs.org/)
.next/
out/

# Nuxt.js (https://nuxtjs.org/)
.nuxt/
dist/

# Gatsby (https://gatsbyjs.com/)
.cache/
# public/ # Uncomment if using Gatsby instead of Next.js

# SvelteKit (https://kit.svelte.dev/)
.svelte-kit/

# VuePress (https://vuepress.vuejs.org/)
.vuepress/dist/
.temp/ # VuePress v2.x cache

# Docusaurus (https://docusaurus.io/)
.docusaurus/

# Serverless Framework (https://www.serverless.com/)
.serverless/

# FuseBox (https://fuse-box.org/)
.fusebox/

# DynamoDB Local (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html)
.dynamodb/

# Serverless Webpack directories
.webpack/

### Development Tools ###
# VSCode
.vscode-test

# Yarn v2 (https://yarnpkg.com/getting-started/migration)
.yarn/cache/
.yarn/unplugged/
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

### macOS ###
# macOS Finder and Spotlight files
.DS_Store

### Xcode (https://developer.apple.com/xcode/) ###
# Xcode-specific files and directories
build/
*.pbxuser
*.mode1v3
*.mode2v3
*.perspectivev3
xcuserdata/
*.xccheckout
*.moved-aside
DerivedData/
*.hmap
*.ipa
*.xcuserstate
**/.xcode.env.local

### Android/IntelliJ (https://developer.android.com/studio) ###
# Android Studio/IntelliJ project files
build/
.idea/
.gradle/
local.properties
*.iml
*.hprof
.cxx/
*.keystore
!debug.keystore

### Mobile Development ###
# Fastlane (https://docs.fastlane.tools/best-practices/source-control/)
**/fastlane/report.xml
**/fastlane/Preview.html
**/fastlane/screenshots/
**/fastlane/test_output/

# Metro (React Native) health check file
.metro-health-check*

# Bundle artifacts for mobile platforms
*.jsbundle

### Ruby/CocoaPods (https://guides.cocoapods.org/) ###
# Pods and vendor directories
**/Pods/
**/vendor/bundle/

### Testing ###
# Coverage reports and testing output
/coverage/

### Other ###
# TernJS (https://ternjs.net/)
.tern-port

# Eclipse (https://www.eclipse.org/)
.metadata/
tmp/

# BUCK (https://buck.build/)
buck-out/
.buckd/
android/app/libs/
android/keystores/debug.keystore

# Expo (https://expo.dev/)
.expo/

# Turborepo (https://turborepo.org/)
.turbo/

# React Native Codegen
ios/generated/
android/generated/

# Generated by react native bob builder
# lib/
",
  "/.mise.toml": "[tools]
java = "zulu-17"
node = "20.18.0"",
  "/.npmrc": "node-linker=hoisted
",
  "/.qdk/meta.json": "{
  "project": "@repo/root",
  "custom": {},
  "files": [
    "./.mise.toml",
    "./.npmrc",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./pnpm-workspace.yaml"
  ],
  "subprojects": [
    "apps/repo-myapp",
    "packages/repo-my-lib-a",
    "packages/repo-my-lib-b",
    "packages/repo-my-lib-c",
    "packages/repo-react-native-multiply",
    "shared/repo-tsconfig"
  ]
}
",
  "/.qdk/tree.txt": "·
└── MonorepoProject(@repo/root)
    ├── JsonFile(.qdk/meta.json)
    ├── IniFile(.npmrc)
    ├── TomlFile(.mise.toml)
    ├── Gitignore
    │   └── TextFile(.gitignore)
    ├── PnpmPackageManager(9.12.3)
    │   └── PnpmWorkspace
    │       └── YamlFile(pnpm-workspace.yaml)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── ReactNativeAppProject(@repo/myapp)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── TextFile(.qdk/tree.txt)
    │   └── TextFile(.qdk/tree.txt)
    ├── ReactNativeLibProject(@repo/react-native-multiply)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── TemplateFiles
    │   │   ├── TextFile(babel.config.js)
    │   │   ├── TextFile(package.json)
    │   │   ├── TextFile(tsconfig.build.json)
    │   │   ├── TextFile(tsconfig.json)
    │   │   ├── TextFile(android/build.gradle)
    │   │   ├── TextFile(android/gradle.properties)
    │   │   ├── TextFile(src/index.tsx)
    │   │   ├── TextFile(src/__tests__/index.test.tsx)
    │   │   ├── TextFile(android/src/main/AndroidManifest.xml)
    │   │   ├── TextFile(android/src/main/AndroidManifestNew.xml)
    │   │   ├── TextFile(react_native_multiply.podspec)
    │   │   ├── TextFile(ios/ReactNativeMultiply-Bridging-Header.h)
    │   │   ├── TextFile(ios/ReactNativeMultiply.mm)
    │   │   ├── TextFile(ios/ReactNativeMultiply.swift)
    │   │   ├── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyModule.kt)
    │   │   └── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyPackage.kt)
    │   └── TextFile(.qdk/tree.txt)
    ├── NodeProject(@repo/my-lib-a)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   └── TextFile(.qdk/tree.txt)
    ├── TsProject(@repo/my-lib-b)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── Typescript(^5.6.2)
    │   │   └── TsConfig
    │   │       └── TsConfigJsonFile(tsconfig.json)
    │   └── TextFile(.qdk/tree.txt)
    ├── TsProject(@repo/my-lib-c)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── Typescript(^5.6.2)
    │   │   └── TsConfig
    │   │       └── TsConfigJsonFile(tsconfig.json)
    │   └── TextFile(.qdk/tree.txt)
    └── NodeProject(@repo/tsconfig)
        ├── JsonFile(.qdk/meta.json)
        ├── PnpmPackageManager(9.12.3)
        ├── PackageJson
        │   └── JsonFile(package.json)
        ├── TsConfig
        │   └── TsConfigJsonFile(node.json)
        ├── TsConfig
        │   └── TsConfigJsonFile(react-native.json)
        └── TextFile(.qdk/tree.txt)",
  "/apps/repo-myapp/.qdk/meta.json": "{
  "project": "@repo/myapp",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./.qdk/tree.txt",
    "./package.json"
  ],
  "subprojects": []
}
",
  "/apps/repo-myapp/.qdk/tree.txt": "·
└── ReactNativeAppProject(@repo/myapp)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── TextFile(.qdk/tree.txt)",
  "/apps/repo-myapp/App.tsx": "// ...
import { Alert, Button } from 'react-native';
import { multiply } from '@repo/react-native-multiply';
import React from'react';
// ...
<Section title="Workspace lib call">
  <Button onPress={async () => {
        Alert.alert("Native multiply(2, 3)= " + await multiply(2, 3))
    }} title='Native Multiply'/>
</Section>
<Section title="See Your Changes">
  ...
</Section>
// ...",
  "/apps/repo-myapp/android/app/build.gradle": "react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    reactNativeDir = file("../../../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    codegenDir = file("../../../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    cliFile = file("../../../../node_modules/react-native/cli.js")
}",
  "/apps/repo-myapp/android/settings.gradle": "pluginManagement { includeBuild("../../../node_modules/@react-native/gradle-plugin") }
plugins { id("com.facebook.react.settings") }
extensions.configure(com.facebook.react.ReactSettingsExtension){ ex -> ex.autolinkLibrariesFromCommand() }
rootProject.name = 'com.example.app'
include ':app'
includeBuild('../../../node_modules/@react-native/gradle-plugin')",
  "/apps/repo-myapp/app.json": "{}",
  "/apps/repo-myapp/metro.config.js": "const {getDefaultConfig} = require('@react-native/metro-config');
      const path = require('node:path');
      
      // Find the project and workspace directories
      const projectRoot = __dirname;
      const monorepoRoot = path.resolve(projectRoot, '../..');
      
      const config = getDefaultConfig(projectRoot);
      
      // 1. Watch all files within the monorepo
      config.watchFolders = [monorepoRoot];
      // 2. Let Metro know where to resolve packages and in what order
      config.resolver.nodeModulesPaths = [
        path.resolve(projectRoot, 'node_modules'),
        path.resolve(monorepoRoot, 'node_modules'),
      ];
      
      module.exports = config;",
  "/apps/repo-myapp/package.json": "{
  "name": "@repo/myapp",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "commonjs",
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "start": "react-native start",
    "test": "jest"
  },
  "dependencies": {
    "@repo/react-native-multiply": "workspace:*",
    "react": "18.3.1",
    "react-native": "0.75.4"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@babel/preset-env": "^7.20.0",
    "@babel/runtime": "^7.20.0",
    "@react-native/babel-preset": "0.75.4",
    "@react-native/eslint-config": "0.75.4",
    "@react-native/metro-config": "0.75.4",
    "@react-native/typescript-config": "0.75.4",
    "@types/react": "^18.2.44",
    "@types/react-test-renderer": "^18.0.0",
    "babel-jest": "^29.6.3",
    "jest": "^29.6.3",
    "react-test-renderer": "18.3.1"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/myapp@0.1.0"
}
",
  "/package.json": "{
  "name": "@repo/root",
  "version": "0.1.0",
  "private": true,
  "description": "Sample QDK Project",
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {
    "qdk": "qdk synth",
    "qdk:check": "qdk synth --check"
  },
  "devDependencies": {
    "qdk": "9.9.9-mock-latest",
    "tsx": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/root@0.1.0"
}
",
  "/packages/repo-my-lib-a/.qdk/meta.json": "{
  "project": "@repo/my-lib-a",
  "custom": {},
  "files": ["./.qdk/meta.json", "./.qdk/tree.txt", "./package.json"],
  "subprojects": []
}
",
  "/packages/repo-my-lib-a/.qdk/tree.txt": "·
└── NodeProject(@repo/my-lib-a)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    └── PackageJson
        └── JsonFile(package.json)",
  "/packages/repo-my-lib-a/package.json": "{
  "name": "@repo/my-lib-a",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {},
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/my-lib-a@0.1.0"
}
",
  "/packages/repo-my-lib-b/.qdk/meta.json": "{
  "project": "@repo/my-lib-b",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./tsconfig.json"
  ],
  "subprojects": []
}
",
  "/packages/repo-my-lib-b/.qdk/tree.txt": "·
└── TsProject(@repo/my-lib-b)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── Typescript(^5.6.2)
        └── TsConfig
            └── TsConfigJsonFile(tsconfig.json)",
  "/packages/repo-my-lib-b/package.json": "{
  "name": "@repo/my-lib-b",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {
    "test": "vitest --passWithNoTests",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "dependencies": {
    "@repo/my-lib-a": "workspace:*",
    "@repo/tsconfig": "workspace:*"
  },
  "devDependencies": {
    "typescript": "^5.6.2",
    "vitest": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/my-lib-b@0.1.0"
}
",
  "/packages/repo-my-lib-b/tsconfig.json": "{
  "extends": ["@repo/tsconfig/node.json"]
}
",
  "/packages/repo-my-lib-c/.qdk/meta.json": "{
  "project": "@repo/my-lib-c",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./tsconfig.json"
  ],
  "subprojects": []
}
",
  "/packages/repo-my-lib-c/.qdk/tree.txt": "·
└── TsProject(@repo/my-lib-c)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── Typescript(^5.6.2)
        └── TsConfig
            └── TsConfigJsonFile(tsconfig.json)",
  "/packages/repo-my-lib-c/package.json": "{
  "name": "@repo/my-lib-c",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {
    "clean": "del-cli dist",
    "test": "vitest --passWithNoTests",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "dependencies": {
    "@repo/my-lib-b": "workspace:*",
    "@repo/tsconfig": "workspace:*",
    "lodash": "^4.17.21",
    "moment": "9.9.9-mock-latest"
  },
  "devDependencies": {
    "del-cli": "^6.0.0",
    "typescript": "^5.6.2",
    "vitest": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/my-lib-c@0.1.0"
}
",
  "/packages/repo-my-lib-c/tsconfig.json": "{
  "extends": ["@repo/tsconfig/node.json"]
}
",
  "/packages/repo-react-native-multiply/.qdk/meta.json": "{
  "project": "@repo/react-native-multiply",
  "custom": {},
  "files": ["./.qdk/meta.json", "./.qdk/tree.txt", "./package.json"],
  "subprojects": []
}
",
  "/packages/repo-react-native-multiply/.qdk/tree.txt": "·
└── ReactNativeLibProject(@repo/react-native-multiply)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── TemplateFiles
        ├── TextFile(babel.config.js)
        ├── TextFile(package.json)
        ├── TextFile(tsconfig.build.json)
        ├── TextFile(tsconfig.json)
        ├── TextFile(android/build.gradle)
        ├── TextFile(android/gradle.properties)
        ├── TextFile(src/index.tsx)
        ├── TextFile(src/__tests__/index.test.tsx)
        ├── TextFile(android/src/main/AndroidManifest.xml)
        ├── TextFile(android/src/main/AndroidManifestNew.xml)
        ├── TextFile(react_native_multiply.podspec)
        ├── TextFile(ios/ReactNativeMultiply-Bridging-Header.h)
        ├── TextFile(ios/ReactNativeMultiply.mm)
        ├── TextFile(ios/ReactNativeMultiply.swift)
        ├── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyModule.kt)
        └── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyPackage.kt)",
  "/packages/repo-react-native-multiply/android/build.gradle": "buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["ReactNativeMultiply_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ReactNativeMultiply_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ReactNativeMultiply_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.example.reactnativemultiply"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by \`com.facebook.react:react-android:$version\` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

",
  "/packages/repo-react-native-multiply/android/gradle.properties": "ReactNativeMultiply_kotlinVersion=1.7.0
ReactNativeMultiply_minSdkVersion=21
ReactNativeMultiply_targetSdkVersion=31
ReactNativeMultiply_compileSdkVersion=31
ReactNativeMultiply_ndkversion=21.4.7075529
",
  "/packages/repo-react-native-multiply/android/src/main/AndroidManifest.xml": "<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.example.reactnativemultiply">
</manifest>
",
  "/packages/repo-react-native-multiply/android/src/main/AndroidManifestNew.xml": "<manifest xmlns:android="http://schemas.android.com/apk/res/android">
</manifest>
",
  "/packages/repo-react-native-multiply/android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyModule.kt": "package com.example.reactnativemultiply
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.facebook.react.bridge.Promise

class ReactNativeMultiplyModule(reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext) {

  override fun getName(): String {
    return NAME
  }

  // Example method
  // See https://reactnative.dev/docs/native-modules-android
  @ReactMethod
  fun multiply(a: Double, b: Double, promise: Promise) {
    promise.resolve(a * b)
  }

  companion object {
    const val NAME = "ReactNativeMultiply"
  }
}
",
  "/packages/repo-react-native-multiply/android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyPackage.kt": "package com.example.reactnativemultiply
import com.facebook.react.ReactPackage
import com.facebook.react.bridge.NativeModule
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.uimanager.ViewManager


class ReactNativeMultiplyPackage : ReactPackage {
  override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {
    return listOf(ReactNativeMultiplyModule(reactContext))
  }

  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
    return emptyList()
  }
}
",
  "/packages/repo-react-native-multiply/babel.config.js": "module.exports = {
  presets: [
    ['module:react-native-builder-bob/babel-preset', { modules: 'commonjs' }],
  ],
};
",
  "/packages/repo-react-native-multiply/ios/ReactNativeMultiply-Bridging-Header.h": "#import <React/RCTBridgeModule.h>
#import <React/RCTViewManager.h>
",
  "/packages/repo-react-native-multiply/ios/ReactNativeMultiply.mm": "#import <React/RCTBridgeModule.h>

@interface RCT_EXTERN_MODULE(ReactNativeMultiply, NSObject)

RCT_EXTERN_METHOD(multiply:(float)a withB:(float)b
                 withResolver:(RCTPromiseResolveBlock)resolve
                 withRejecter:(RCTPromiseRejectBlock)reject)

+ (BOOL)requiresMainQueueSetup
{
  return NO;
}

@end
",
  "/packages/repo-react-native-multiply/ios/ReactNativeMultiply.swift": "@objc(ReactNativeMultiply)
class ReactNativeMultiply: NSObject {

  @objc(multiply:withB:withResolver:withRejecter:)
  func multiply(a: Float, b: Float, resolve:RCTPromiseResolveBlock,reject:RCTPromiseRejectBlock) -> Void {
    resolve(a*b)
  }
}
",
  "/packages/repo-react-native-multiply/package.json": "{
  "name": "@repo/react-native-multiply",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "commonjs",
  "exports": {
    ".": {
      "import": {
        "types": "./lib/typescript/module/src/index.d.ts",
        "default": "./lib/module/index.js"
      },
      "require": {
        "types": "./lib/typescript/commonjs/src/index.d.ts",
        "default": "./lib/commonjs/index.js"
      }
    }
  },
  "main": "./lib/commonjs/index.js",
  "module": "./lib/module/index.js",
  "source": "./src/index.tsx",
  "files": [
    "src",
    "lib",
    "android",
    "ios",
    "cpp",
    "*.podspec",
    "react-native.config.json",
    "!ios/build",
    "!android/build",
    "!android/gradle",
    "!android/gradlew",
    "!android/gradlew.bat",
    "!android/local.properties",
    "!**/__tests__",
    "!**/__fixtures__",
    "!**/__mocks__",
    "!**/.*"
  ],
  "scripts": {
    "build": "bob build",
    "clean": "del-cli android/build example/android/build example/android/app/build example/ios/build lib",
    "prepare": "bob build",
    "test": "jest",
    "typecheck": "tsc"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "<rootDir>/example/node_modules",
      "<rootDir>/lib/"
    ],
    "preset": "react-native"
  },
  "devDependencies": {
    "@types/jest": "^29.5.5",
    "@types/react": "^18.2.44",
    "del-cli": "^5.1.0",
    "jest": "^29.7.0",
    "react": "18.3.1",
    "react-native": "0.75.4",
    "react-native-builder-bob": "^0.30.2",
    "typescript": "^5.6.3"
  },
  "peerDependencies": {
    "react": "*",
    "react-native": "*"
  },
  "packageManager": "pnpm@9.12.3",
  "react-native-builder-bob": {
    "source": "src",
    "output": "lib",
    "targets": [
      [
        "commonjs",
        {
          "esm": true
        }
      ],
      [
        "module",
        {
          "esm": true
        }
      ],
      [
        "typescript",
        {
          "project": "tsconfig.build.json",
          "esm": true
        }
      ]
    ]
  },
  "readme": "ERROR: No README data found!",
  "_id": "@repo/react-native-multiply@0.1.0"
}
",
  "/packages/repo-react-native-multiply/react_native_multiply.podspec": "require "json"

package = JSON.parse(File.read(File.join(__dir__, "package.json")))
folly_compiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -Wno-comma -Wno-shorten-64-to-32'

Pod::Spec.new do |s|
  s.name         = "react_native_multiply"
  s.version      = package["version"]
  s.summary      = package["description"]
  s.homepage     = package["homepage"]
  s.license      = package["license"]
  s.authors      = package["author"]

  s.platforms    = { :ios => min_ios_version_supported }
  #s.source       = { :git => "https://empty.git", :tag => "#{s.version}" }

  s.source_files = "ios/**/*.{h,m,mm,swift}"

  # Use install_modules_dependencies helper to install the dependencies if React Native version >=0.71.0.
  # See https://github.com/facebook/react-native/blob/febf6b7f33fdb4904669f99d795eba4c0f95d7bf/scripts/cocoapods/new_architecture.rb#L79.
  if respond_to?(:install_modules_dependencies, true)
    install_modules_dependencies(s)
  else
    s.dependency "React-Core"

    # Don't install the dependencies when we run \`pod install\` in the old architecture.
    if ENV['RCT_NEW_ARCH_ENABLED'] == '1' then
      s.compiler_flags = folly_compiler_flags + " -DRCT_NEW_ARCH_ENABLED=1"
      s.pod_target_xcconfig    = {
          "HEADER_SEARCH_PATHS" => "\\"$(PODS_ROOT)/boost\\"",
          "OTHER_CPLUSPLUSFLAGS" => "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1",
          "CLANG_CXX_LANGUAGE_STANDARD" => "c++17"
      }
      s.dependency "React-Codegen"
      s.dependency "RCT-Folly"
      s.dependency "RCTRequired"
      s.dependency "RCTTypeSafety"
      s.dependency "ReactCommon/turbomodule/core"
    end
  end
end
",
  "/packages/repo-react-native-multiply/src/__tests__/index.test.tsx": "it.todo('write a test');
",
  "/packages/repo-react-native-multiply/src/index.tsx": "import { NativeModules, Platform } from 'react-native';

const LINKING_ERROR =
  \`The package 'repo_react_native_multiply' doesn't seem to be linked. Make sure: \\n\\n\` +
  Platform.select({ ios: "- You have run 'pod install'\\n", default: '' }) +
  '- You rebuilt the app after installing the package\\n' +
  '- You are not using Expo Go\\n';

const ReactNativeMultiply = NativeModules.ReactNativeMultiply
  ? NativeModules.ReactNativeMultiply
  : new Proxy(
      {},
      {
        get() {
          throw new Error(LINKING_ERROR);
        },
      },
    );

export function multiply(a: number, b: number): Promise<number> {
  return ReactNativeMultiply.multiply(a, b);
}
",
  "/packages/repo-react-native-multiply/tsconfig.build.json": "{
  "extends": "./tsconfig",
  "exclude": ["example", "lib"]
}
",
  "/packages/repo-react-native-multiply/tsconfig.json": "{
  "compilerOptions": {
    "rootDir": ".",
    "paths": {
      "@repo/react-native-multiply": ["./src/index"]
    },
    "allowUnreachableCode": false,
    "allowUnusedLabels": false,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-jsx",
    "lib": ["ESNext"],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitUseStrict": false,
    "noStrictGenericChecks": false,
    "noUncheckedIndexedAccess": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ESNext",
    "verbatimModuleSyntax": true
  }
}
",
  "/pnpm-workspace.yaml": "packages:
  - apps/repo-myapp
  - packages/repo-react-native-multiply
  - packages/repo-my-lib-a
  - packages/repo-my-lib-b
  - packages/repo-my-lib-c
  - shared/repo-tsconfig
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/<%=it.repoName%>.podspec.eta": "require "json"

package = JSON.parse(File.read(File.join(__dir__, "package.json")))
folly_compiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -Wno-comma -Wno-shorten-64-to-32'

Pod::Spec.new do |s|
  s.name         = "<%=it.repoName%>"
  s.version      = package["version"]
  s.summary      = package["description"]
  s.homepage     = package["homepage"]
  s.license      = package["license"]
  s.authors      = package["author"]

  s.platforms    = { :ios => min_ios_version_supported }
  #s.source       = { :git => "https://empty.git", :tag => "#{s.version}" }

  s.source_files = "ios/**/*.{h,m,mm,swift}"

  # Use install_modules_dependencies helper to install the dependencies if React Native version >=0.71.0.
  # See https://github.com/facebook/react-native/blob/febf6b7f33fdb4904669f99d795eba4c0f95d7bf/scripts/cocoapods/new_architecture.rb#L79.
  if respond_to?(:install_modules_dependencies, true)
    install_modules_dependencies(s)
  else
    s.dependency "React-Core"

    # Don't install the dependencies when we run \`pod install\` in the old architecture.
    if ENV['RCT_NEW_ARCH_ENABLED'] == '1' then
      s.compiler_flags = folly_compiler_flags + " -DRCT_NEW_ARCH_ENABLED=1"
      s.pod_target_xcconfig    = {
          "HEADER_SEARCH_PATHS" => "\\"$(PODS_ROOT)/boost\\"",
          "OTHER_CPLUSPLUSFLAGS" => "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1",
          "CLANG_CXX_LANGUAGE_STANDARD" => "c++17"
      }
      s.dependency "React-Codegen"
      s.dependency "RCT-Folly"
      s.dependency "RCTRequired"
      s.dependency "RCTTypeSafety"
      s.dependency "ReactCommon/turbomodule/core"
    end
  end
end
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/build.gradle.eta": "buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["<%=it.moduleName%>_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["<%=it.moduleName%>_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["<%=it.moduleName%>_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "<%=it.packageName%>"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by \`com.facebook.react:react-android:$version\` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/gradle.properties.eta": "<%=it.moduleName%>_kotlinVersion=1.7.0
<%=it.moduleName%>_minSdkVersion=21
<%=it.moduleName%>_targetSdkVersion=31
<%=it.moduleName%>_compileSdkVersion=31
<%=it.moduleName%>_ndkversion=21.4.7075529
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/AndroidManifest.xml.eta": "<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="<%=it.packageName%>">
</manifest>
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/AndroidManifestNew.xml.eta": "<manifest xmlns:android="http://schemas.android.com/apk/res/android">
</manifest>
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/java/<%=it.packageFolder%>/<%=it.moduleName%>Module.kt.eta": "package <%=it.packageName%>

import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.facebook.react.bridge.Promise

class <%=it.moduleName%>Module(reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext) {

  override fun getName(): String {
    return NAME
  }

  // Example method
  // See https://reactnative.dev/docs/native-modules-android
  @ReactMethod
  fun multiply(a: Double, b: Double, promise: Promise) {
    promise.resolve(a * b)
  }

  companion object {
    const val NAME = "<%=it.moduleName%>"
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/java/<%=it.packageFolder%>/<%=it.moduleName%>Package.kt.eta": "package <%=it.packageName%>

import com.facebook.react.ReactPackage
import com.facebook.react.bridge.NativeModule
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.uimanager.ViewManager


class <%=it.moduleName%>Package : ReactPackage {
  override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {
    return listOf(<%=it.moduleName%>Module(reactContext))
  }

  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
    return emptyList()
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/babel.config.js.eta": "module.exports = {
  presets: [
    ['module:react-native-builder-bob/babel-preset', { modules: 'commonjs' }],
  ],
};
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/ios/<%=it.moduleName%>-Bridging-Header.h.eta": "#import <React/RCTBridgeModule.h>
#import <React/RCTViewManager.h>
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/ios/<%=it.moduleName%>.mm.eta": "#import <React/RCTBridgeModule.h>

@interface RCT_EXTERN_MODULE(<%=it.moduleName%>, NSObject)

RCT_EXTERN_METHOD(multiply:(float)a withB:(float)b
                 withResolver:(RCTPromiseResolveBlock)resolve
                 withRejecter:(RCTPromiseRejectBlock)reject)

+ (BOOL)requiresMainQueueSetup
{
  return NO;
}

@end
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/ios/<%=it.moduleName%>.swift.eta": "@objc(<%=it.moduleName%>)
class <%=it.moduleName%>: NSObject {

  @objc(multiply:withB:withResolver:withRejecter:)
  func multiply(a: Float, b: Float, resolve:RCTPromiseResolveBlock,reject:RCTPromiseRejectBlock) -> Void {
    resolve(a*b)
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/package.json.eta": "{
  "name": "<%=it.name%>",
  "version": "<%=it.ctx.project.version%>",
  "description": "<%=it.ctx.project.description%>",
  "source": "./src/index.tsx",
  "main": "./lib/commonjs/index.js",
  "module": "./lib/module/index.js",
  "exports": {
    ".": {
      "import": {
        "types": "./lib/typescript/module/src/index.d.ts",
        "default": "./lib/module/index.js"
      },
      "require": {
        "types": "./lib/typescript/commonjs/src/index.d.ts",
        "default": "./lib/commonjs/index.js"
      }
    }
  },
  "files": [
    "src",
    "lib",
    "android",
    "ios",
    "cpp",
    "*.podspec",
    "react-native.config.json",
    "!ios/build",
    "!android/build",
    "!android/gradle",
    "!android/gradlew",
    "!android/gradlew.bat",
    "!android/local.properties",
    "!**/__tests__",
    "!**/__fixtures__",
    "!**/__mocks__",
    "!**/.*"
  ],
  "scripts": {
    "test": "jest",
    "typecheck": "tsc",
    "lint": "eslint \\"**/*.{js,ts,tsx}\\"",
    "clean": "del-cli android/build lib",
    "prepare": "bob build",
    "release": "release-it"
  },
  "keywords": [
    "react-native",
    "ios",
    "android"
  ],
  "license": "MIT",
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "devDependencies": {
    "@commitlint/config-conventional": "^17.0.2",
    "@evilmartians/lefthook": "^1.5.0",
    "@react-native/eslint-config": "^0.73.1",
    "@release-it/conventional-changelog": "^5.0.0",
    "@types/jest": "^29.5.5",
    "@types/react": "^18.2.44",
    "commitlint": "^17.0.2",
    "del-cli": "^5.1.0",
    "eslint": "^8.51.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "jest": "^29.7.0",
    "prettier": "^3.0.3",
    "react": "17.0.2",
    "react-native": "0.73.0",
    "react-native-builder-bob": "^0.30.3",
    "release-it": "^15.0.0",
    "turbo": "^1.10.7",
    "typescript": "^5.2.2"
  },
  "resolutions": {
    "@types/react": "^18.2.44"
  },
  "peerDependencies": {
    "react": "*",
    "react-native": "*"
  },
  "jest": {
    "preset": "react-native",
    "modulePathIgnorePatterns": [
      "<rootDir>/example/node_modules",
      "<rootDir>/lib/"
    ]
  },
  "eslintConfig": {
    "root": true,
    "extends": [
      "@react-native",
      "prettier"
    ],
    "rules": {
      "react/react-in-jsx-scope": "off",
      "prettier/prettier": [
        "error",
        {
          "quoteProps": "consistent",
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "es5",
          "useTabs": false
        }
      ]
    }
  },
  "eslintIgnore": [
    "node_modules/",
    "lib/"
  ],
  "prettier": {
    "quoteProps": "consistent",
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "useTabs": false
  },
  "react-native-builder-bob": {
    "source": "src",
    "output": "lib",
    "targets": [
      [
        "commonjs",
        {
          "esm": true
        }
      ],
      [
        "module",
        {
          "esm": true
        }
      ],
      [
        "typescript",
        {
          "project": "tsconfig.build.json",
          "esm": true
        }
      ]
    ]
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/src/__tests__/index.test.tsx.eta": "it.todo('write a test');
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/src/index.tsx.eta": "import { NativeModules, Platform } from 'react-native';

const LINKING_ERROR =
  \`The package 'repo_react_native_multiply' doesn't seem to be linked. Make sure: \\n\\n\` +
  Platform.select({ ios: "- You have run 'pod install'\\n", default: '' }) +
  '- You rebuilt the app after installing the package\\n' +
  '- You are not using Expo Go\\n';

const <%=it.moduleName%> = NativeModules.<%=it.moduleName%>
  ? NativeModules.<%=it.moduleName%>
  : new Proxy(
      {},
      {
        get() {
          throw new Error(LINKING_ERROR);
        },
      }
    );

export function multiply(a: number, b: number): Promise<number> {
  return <%=it.moduleName%>.multiply(a, b);
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/tsconfig.build.json.eta": "{
  "extends": "./tsconfig",
  "exclude": ["example", "lib"]
}",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/tsconfig.json.eta": "{
  "compilerOptions": {
    "rootDir": ".",
    "paths": {
      "<%=it.name%>": ["./src/index"]
    },
    "allowUnreachableCode": false,
    "allowUnusedLabels": false,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-jsx",
    "lib": ["ESNext"],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitUseStrict": false,
    "noStrictGenericChecks": false,
    "noUncheckedIndexedAccess": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ESNext",
    "verbatimModuleSyntax": true
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/templates.cts": "export const TEMPLATES_PATH = __dirname;
",
  "/shared/repo-tsconfig/.qdk/meta.json": "{
  "project": "@repo/tsconfig",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./node.json",
    "./package.json",
    "./react-native.json"
  ],
  "subprojects": []
}
",
  "/shared/repo-tsconfig/.qdk/tree.txt": "·
└── NodeProject(@repo/tsconfig)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── TsConfig
    │   └── TsConfigJsonFile(node.json)
    └── TsConfig
        └── TsConfigJsonFile(react-native.json)",
  "/shared/repo-tsconfig/node.json": "{
  "extends": ["@tsconfig/node20"]
}
",
  "/shared/repo-tsconfig/package.json": "{
  "name": "@repo/tsconfig",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {},
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@tsconfig/react-native": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/tsconfig@0.1.0"
}
",
  "/shared/repo-tsconfig/react-native.json": "{
  "extends": ["@tsconfig/react-native"]
}
",
}
`;

exports[`monorepo template > synthetize a monorepo template and delete orphan files 1`] = `
"/
├─ .gitignore
├─ .mise.toml
├─ .npmrc
├─ .qdk/
│  ├─ meta.json
│  └─ tree.txt
├─ apps/
│  └─ repo-myapp/
│     ├─ .qdk/
│     │  ├─ meta.json
│     │  └─ tree.txt
│     ├─ App.tsx
│     ├─ android/
│     │  ├─ app/
│     │  │  └─ build.gradle
│     │  └─ settings.gradle
│     ├─ app.json
│     ├─ metro.config.js
│     └─ package.json
├─ package.json
├─ packages/
│  ├─ repo-my-lib-a/
│  │  ├─ .qdk/
│  │  │  ├─ meta.json
│  │  │  └─ tree.txt
│  │  └─ package.json
│  ├─ repo-my-lib-b/
│  │  ├─ .qdk/
│  │  │  ├─ meta.json
│  │  │  └─ tree.txt
│  │  ├─ package.json
│  │  └─ tsconfig.json
│  ├─ repo-my-lib-c/
│  │  ├─ .qdk/
│  │  │  ├─ meta.json
│  │  │  └─ tree.txt
│  │  ├─ package.json
│  │  └─ tsconfig.json
│  └─ repo-react-native-multiply/
│     ├─ .qdk/
│     │  ├─ meta.json
│     │  └─ tree.txt
│     ├─ android/
│     │  ├─ build.gradle
│     │  ├─ gradle.properties
│     │  └─ src/
│     │     └─ main/
│     │        ├─ AndroidManifest.xml
│     │        ├─ AndroidManifestNew.xml
│     │        └─ java/
│     │           └─ com/
│     │              └─ example/
│     │                 └─ reactnativemultiply/
│     │                    ├─ ReactNativeMultiplyModule.kt
│     │                    └─ ReactNativeMultiplyPackage.kt
│     ├─ babel.config.js
│     ├─ ios/
│     │  ├─ ReactNativeMultiply-Bridging-Header.h
│     │  ├─ ReactNativeMultiply.mm
│     │  └─ ReactNativeMultiply.swift
│     ├─ package.json
│     ├─ react_native_multiply.podspec
│     ├─ src/
│     │  ├─ __tests__/
│     │  │  └─ index.test.tsx
│     │  └─ index.tsx
│     ├─ tsconfig.build.json
│     └─ tsconfig.json
├─ pnpm-workspace.yaml
├─ qdk/
│  └─ src/
│     └─ templates/
│        └─ monorepo/
│           └─ .qdk/
│              └─ components/
│                 └─ templates/
│                    ├─ react-native-library/
│                    │  ├─ <%=it.repoName%>.podspec.eta
│                    │  ├─ android/
│                    │  │  ├─ build.gradle.eta
│                    │  │  ├─ gradle.properties.eta
│                    │  │  └─ src/ (...)
│                    │  ├─ babel.config.js.eta
│                    │  ├─ ios/
│                    │  │  ├─ <%=it.moduleName%>-Bridging-Header.h.eta
│                    │  │  ├─ <%=it.moduleName%>.mm.eta
│                    │  │  └─ <%=it.moduleName%>.swift.eta
│                    │  ├─ package.json.eta
│                    │  ├─ src/
│                    │  │  ├─ __tests__/ (...)
│                    │  │  └─ index.tsx.eta
│                    │  ├─ tsconfig.build.json.eta
│                    │  └─ tsconfig.json.eta
│                    └─ templates.cts
└─ shared/
   └─ repo-tsconfig/
      ├─ .qdk/
      │  ├─ meta.json
      │  └─ tree.txt
      ├─ node.json
      ├─ package.json
      └─ react-native.json"
`;

exports[`monorepo template > synthetize a monorepo template and delete orphan files 2`] = `
{
  "/.gitignore": "
### Node.js Standard ###
# Logs generated by Node.js and related tools
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data files (PID files, seeds, locks)
pids
*.pid
*.seed
*.pid.lock

# Dependency directories (Node.js and package managers)
node_modules/
jspm_packages/
web_modules/ # Snowpack (https://snowpack.dev/)

# Build outputs and binary addons (https://nodejs.org/api/addons.html)
build/Release
.lock-wscript

# Coverage files used by testing tools like Istanbul/nyc
coverage/
*.lcov
.nyc_output

# Cache directories
.npm
.cache
.parcel-cache # Parcel (https://parceljs.org/)
.eslintcache # ESLint
.stylelintcache # Stylelint
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# TypeScript cache
*.tsbuildinfo

# Yarn Integrity file
.yarn-integrity

# REPL history
.node_repl_history

# Output from 'npm pack'
*.tgz

### Environment Variables ###
# dotenv environment variable files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

### Framework-specific Build Outputs ###
# Next.js (https://nextjs.org/)
.next/
out/

# Nuxt.js (https://nuxtjs.org/)
.nuxt/
dist/

# Gatsby (https://gatsbyjs.com/)
.cache/
# public/ # Uncomment if using Gatsby instead of Next.js

# SvelteKit (https://kit.svelte.dev/)
.svelte-kit/

# VuePress (https://vuepress.vuejs.org/)
.vuepress/dist/
.temp/ # VuePress v2.x cache

# Docusaurus (https://docusaurus.io/)
.docusaurus/

# Serverless Framework (https://www.serverless.com/)
.serverless/

# FuseBox (https://fuse-box.org/)
.fusebox/

# DynamoDB Local (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html)
.dynamodb/

# Serverless Webpack directories
.webpack/

### Development Tools ###
# VSCode
.vscode-test

# Yarn v2 (https://yarnpkg.com/getting-started/migration)
.yarn/cache/
.yarn/unplugged/
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

### macOS ###
# macOS Finder and Spotlight files
.DS_Store

### Xcode (https://developer.apple.com/xcode/) ###
# Xcode-specific files and directories
build/
*.pbxuser
*.mode1v3
*.mode2v3
*.perspectivev3
xcuserdata/
*.xccheckout
*.moved-aside
DerivedData/
*.hmap
*.ipa
*.xcuserstate
**/.xcode.env.local

### Android/IntelliJ (https://developer.android.com/studio) ###
# Android Studio/IntelliJ project files
build/
.idea/
.gradle/
local.properties
*.iml
*.hprof
.cxx/
*.keystore
!debug.keystore

### Mobile Development ###
# Fastlane (https://docs.fastlane.tools/best-practices/source-control/)
**/fastlane/report.xml
**/fastlane/Preview.html
**/fastlane/screenshots/
**/fastlane/test_output/

# Metro (React Native) health check file
.metro-health-check*

# Bundle artifacts for mobile platforms
*.jsbundle

### Ruby/CocoaPods (https://guides.cocoapods.org/) ###
# Pods and vendor directories
**/Pods/
**/vendor/bundle/

### Testing ###
# Coverage reports and testing output
/coverage/

### Other ###
# TernJS (https://ternjs.net/)
.tern-port

# Eclipse (https://www.eclipse.org/)
.metadata/
tmp/

# BUCK (https://buck.build/)
buck-out/
.buckd/
android/app/libs/
android/keystores/debug.keystore

# Expo (https://expo.dev/)
.expo/

# Turborepo (https://turborepo.org/)
.turbo/

# React Native Codegen
ios/generated/
android/generated/

# Generated by react native bob builder
# lib/
",
  "/.mise.toml": "[tools]
java = "zulu-17"
node = "20.18.0"",
  "/.npmrc": "node-linker=hoisted
",
  "/.qdk/meta.json": "{
  "project": "@repo/root",
  "custom": {},
  "files": [
    "./.mise.toml",
    "./.npmrc",
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./pnpm-workspace.yaml"
  ],
  "subprojects": [
    "apps/repo-myapp",
    "packages/repo-my-lib-a",
    "packages/repo-my-lib-b",
    "packages/repo-my-lib-c",
    "packages/repo-react-native-multiply",
    "shared/repo-tsconfig"
  ]
}
",
  "/.qdk/tree.txt": "·
└── MonorepoProject(@repo/root)
    ├── JsonFile(.qdk/meta.json)
    ├── IniFile(.npmrc)
    ├── TomlFile(.mise.toml)
    ├── Gitignore
    │   └── TextFile(.gitignore)
    ├── PnpmPackageManager(9.12.3)
    │   └── PnpmWorkspace
    │       └── YamlFile(pnpm-workspace.yaml)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── ReactNativeAppProject(@repo/myapp)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── TextFile(.qdk/tree.txt)
    │   └── TextFile(.qdk/tree.txt)
    ├── ReactNativeLibProject(@repo/react-native-multiply)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── TemplateFiles
    │   │   ├── TextFile(babel.config.js)
    │   │   ├── TextFile(package.json)
    │   │   ├── TextFile(tsconfig.build.json)
    │   │   ├── TextFile(tsconfig.json)
    │   │   ├── TextFile(android/build.gradle)
    │   │   ├── TextFile(android/gradle.properties)
    │   │   ├── TextFile(src/index.tsx)
    │   │   ├── TextFile(src/__tests__/index.test.tsx)
    │   │   ├── TextFile(android/src/main/AndroidManifest.xml)
    │   │   ├── TextFile(android/src/main/AndroidManifestNew.xml)
    │   │   ├── TextFile(react_native_multiply.podspec)
    │   │   ├── TextFile(ios/ReactNativeMultiply-Bridging-Header.h)
    │   │   ├── TextFile(ios/ReactNativeMultiply.mm)
    │   │   ├── TextFile(ios/ReactNativeMultiply.swift)
    │   │   ├── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyModule.kt)
    │   │   └── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyPackage.kt)
    │   └── TextFile(.qdk/tree.txt)
    ├── NodeProject(@repo/my-lib-a)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   └── TextFile(.qdk/tree.txt)
    ├── TsProject(@repo/my-lib-b)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── Typescript(^5.6.2)
    │   │   └── TsConfig
    │   │       └── TsConfigJsonFile(tsconfig.json)
    │   └── TextFile(.qdk/tree.txt)
    ├── TsProject(@repo/my-lib-c)
    │   ├── JsonFile(.qdk/meta.json)
    │   ├── PnpmPackageManager(9.12.3)
    │   ├── PackageJson
    │   │   └── JsonFile(package.json)
    │   ├── Typescript(^5.6.2)
    │   │   └── TsConfig
    │   │       └── TsConfigJsonFile(tsconfig.json)
    │   └── TextFile(.qdk/tree.txt)
    └── NodeProject(@repo/tsconfig)
        ├── JsonFile(.qdk/meta.json)
        ├── PnpmPackageManager(9.12.3)
        ├── PackageJson
        │   └── JsonFile(package.json)
        ├── TsConfig
        │   └── TsConfigJsonFile(node.json)
        ├── TsConfig
        │   └── TsConfigJsonFile(react-native.json)
        └── TextFile(.qdk/tree.txt)",
  "/apps/repo-myapp/.qdk/meta.json": "{
  "project": "@repo/myapp",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./.qdk/tree.txt",
    "./package.json"
  ],
  "subprojects": []
}
",
  "/apps/repo-myapp/.qdk/tree.txt": "·
└── ReactNativeAppProject(@repo/myapp)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── TextFile(.qdk/tree.txt)",
  "/apps/repo-myapp/App.tsx": "// ...
import { Alert, Button } from 'react-native';
import { multiply } from '@repo/react-native-multiply';
import React from'react';
// ...
<Section title="Workspace lib call">
  <Button onPress={async () => {
        Alert.alert("Native multiply(2, 3)= " + await multiply(2, 3))
    }} title='Native Multiply'/>
</Section>
<Section title="See Your Changes">
  ...
</Section>
// ...",
  "/apps/repo-myapp/android/app/build.gradle": "react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    reactNativeDir = file("../../../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    codegenDir = file("../../../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    cliFile = file("../../../../node_modules/react-native/cli.js")
}",
  "/apps/repo-myapp/android/settings.gradle": "pluginManagement { includeBuild("../../../node_modules/@react-native/gradle-plugin") }
plugins { id("com.facebook.react.settings") }
extensions.configure(com.facebook.react.ReactSettingsExtension){ ex -> ex.autolinkLibrariesFromCommand() }
rootProject.name = 'com.example.app'
include ':app'
includeBuild('../../../node_modules/@react-native/gradle-plugin')",
  "/apps/repo-myapp/app.json": "{}",
  "/apps/repo-myapp/metro.config.js": "const {getDefaultConfig} = require('@react-native/metro-config');
      const path = require('node:path');
      
      // Find the project and workspace directories
      const projectRoot = __dirname;
      const monorepoRoot = path.resolve(projectRoot, '../..');
      
      const config = getDefaultConfig(projectRoot);
      
      // 1. Watch all files within the monorepo
      config.watchFolders = [monorepoRoot];
      // 2. Let Metro know where to resolve packages and in what order
      config.resolver.nodeModulesPaths = [
        path.resolve(projectRoot, 'node_modules'),
        path.resolve(monorepoRoot, 'node_modules'),
      ];
      
      module.exports = config;",
  "/apps/repo-myapp/package.json": "{
  "name": "@repo/myapp",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "commonjs",
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "start": "react-native start",
    "test": "jest"
  },
  "dependencies": {
    "@repo/react-native-multiply": "workspace:*",
    "react": "18.3.1",
    "react-native": "0.75.4"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@babel/preset-env": "^7.20.0",
    "@babel/runtime": "^7.20.0",
    "@react-native/babel-preset": "0.75.4",
    "@react-native/eslint-config": "0.75.4",
    "@react-native/metro-config": "0.75.4",
    "@react-native/typescript-config": "0.75.4",
    "@types/react": "^18.2.44",
    "@types/react-test-renderer": "^18.0.0",
    "babel-jest": "^29.6.3",
    "jest": "^29.6.3",
    "react-test-renderer": "18.3.1"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/myapp@0.1.0"
}
",
  "/package.json": "{
  "name": "@repo/root",
  "version": "0.1.0",
  "private": true,
  "description": "Sample QDK Project",
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {
    "qdk": "qdk synth",
    "qdk:check": "qdk synth --check"
  },
  "devDependencies": {
    "qdk": "9.9.9-mock-latest",
    "tsx": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/root@0.1.0"
}
",
  "/packages/repo-my-lib-a/.qdk/meta.json": "{
  "project": "@repo/my-lib-a",
  "custom": {},
  "files": ["./.qdk/meta.json", "./.qdk/tree.txt", "./package.json"],
  "subprojects": []
}
",
  "/packages/repo-my-lib-a/.qdk/tree.txt": "·
└── NodeProject(@repo/my-lib-a)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    └── PackageJson
        └── JsonFile(package.json)",
  "/packages/repo-my-lib-a/package.json": "{
  "name": "@repo/my-lib-a",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {},
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/my-lib-a@0.1.0"
}
",
  "/packages/repo-my-lib-b/.qdk/meta.json": "{
  "project": "@repo/my-lib-b",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./tsconfig.json"
  ],
  "subprojects": []
}
",
  "/packages/repo-my-lib-b/.qdk/tree.txt": "·
└── TsProject(@repo/my-lib-b)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── Typescript(^5.6.2)
        └── TsConfig
            └── TsConfigJsonFile(tsconfig.json)",
  "/packages/repo-my-lib-b/package.json": "{
  "name": "@repo/my-lib-b",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {
    "test": "vitest --passWithNoTests",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "dependencies": {
    "@repo/my-lib-a": "workspace:*",
    "@repo/tsconfig": "workspace:*"
  },
  "devDependencies": {
    "typescript": "^5.6.2",
    "vitest": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/my-lib-b@0.1.0"
}
",
  "/packages/repo-my-lib-b/tsconfig.json": "{
  "extends": ["@repo/tsconfig/node.json"]
}
",
  "/packages/repo-my-lib-c/.qdk/meta.json": "{
  "project": "@repo/my-lib-c",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./package.json",
    "./tsconfig.json"
  ],
  "subprojects": []
}
",
  "/packages/repo-my-lib-c/.qdk/tree.txt": "·
└── TsProject(@repo/my-lib-c)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── Typescript(^5.6.2)
        └── TsConfig
            └── TsConfigJsonFile(tsconfig.json)",
  "/packages/repo-my-lib-c/package.json": "{
  "name": "@repo/my-lib-c",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {
    "clean": "del-cli dist",
    "test": "vitest --passWithNoTests",
    "typescript": "tsc",
    "typescript:check": "tsc -p tsconfig.json --noEmit",
    "typescript:explain": "tsc -p tsconfig.json --noEmit --explainFiles > explainTypes.txt"
  },
  "dependencies": {
    "@repo/my-lib-b": "workspace:*",
    "@repo/tsconfig": "workspace:*",
    "lodash": "^4.17.21",
    "moment": "9.9.9-mock-latest"
  },
  "devDependencies": {
    "del-cli": "^6.0.0",
    "typescript": "^5.6.2",
    "vitest": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/my-lib-c@0.1.0"
}
",
  "/packages/repo-my-lib-c/tsconfig.json": "{
  "extends": ["@repo/tsconfig/node.json"]
}
",
  "/packages/repo-react-native-multiply/.qdk/meta.json": "{
  "project": "@repo/react-native-multiply",
  "custom": {},
  "files": ["./.qdk/meta.json", "./.qdk/tree.txt", "./package.json"],
  "subprojects": []
}
",
  "/packages/repo-react-native-multiply/.qdk/tree.txt": "·
└── ReactNativeLibProject(@repo/react-native-multiply)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    └── TemplateFiles
        ├── TextFile(babel.config.js)
        ├── TextFile(package.json)
        ├── TextFile(tsconfig.build.json)
        ├── TextFile(tsconfig.json)
        ├── TextFile(android/build.gradle)
        ├── TextFile(android/gradle.properties)
        ├── TextFile(src/index.tsx)
        ├── TextFile(src/__tests__/index.test.tsx)
        ├── TextFile(android/src/main/AndroidManifest.xml)
        ├── TextFile(android/src/main/AndroidManifestNew.xml)
        ├── TextFile(react_native_multiply.podspec)
        ├── TextFile(ios/ReactNativeMultiply-Bridging-Header.h)
        ├── TextFile(ios/ReactNativeMultiply.mm)
        ├── TextFile(ios/ReactNativeMultiply.swift)
        ├── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyModule.kt)
        └── TextFile(android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyPackage.kt)",
  "/packages/repo-react-native-multiply/android/build.gradle": "buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["ReactNativeMultiply_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ReactNativeMultiply_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ReactNativeMultiply_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.example.reactnativemultiply"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by \`com.facebook.react:react-android:$version\` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

",
  "/packages/repo-react-native-multiply/android/gradle.properties": "ReactNativeMultiply_kotlinVersion=1.7.0
ReactNativeMultiply_minSdkVersion=21
ReactNativeMultiply_targetSdkVersion=31
ReactNativeMultiply_compileSdkVersion=31
ReactNativeMultiply_ndkversion=21.4.7075529
",
  "/packages/repo-react-native-multiply/android/src/main/AndroidManifest.xml": "<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.example.reactnativemultiply">
</manifest>
",
  "/packages/repo-react-native-multiply/android/src/main/AndroidManifestNew.xml": "<manifest xmlns:android="http://schemas.android.com/apk/res/android">
</manifest>
",
  "/packages/repo-react-native-multiply/android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyModule.kt": "package com.example.reactnativemultiply
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.facebook.react.bridge.Promise

class ReactNativeMultiplyModule(reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext) {

  override fun getName(): String {
    return NAME
  }

  // Example method
  // See https://reactnative.dev/docs/native-modules-android
  @ReactMethod
  fun multiply(a: Double, b: Double, promise: Promise) {
    promise.resolve(a * b)
  }

  companion object {
    const val NAME = "ReactNativeMultiply"
  }
}
",
  "/packages/repo-react-native-multiply/android/src/main/java/com/example/reactnativemultiply/ReactNativeMultiplyPackage.kt": "package com.example.reactnativemultiply
import com.facebook.react.ReactPackage
import com.facebook.react.bridge.NativeModule
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.uimanager.ViewManager


class ReactNativeMultiplyPackage : ReactPackage {
  override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {
    return listOf(ReactNativeMultiplyModule(reactContext))
  }

  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
    return emptyList()
  }
}
",
  "/packages/repo-react-native-multiply/babel.config.js": "module.exports = {
  presets: [
    ['module:react-native-builder-bob/babel-preset', { modules: 'commonjs' }],
  ],
};
",
  "/packages/repo-react-native-multiply/ios/ReactNativeMultiply-Bridging-Header.h": "#import <React/RCTBridgeModule.h>
#import <React/RCTViewManager.h>
",
  "/packages/repo-react-native-multiply/ios/ReactNativeMultiply.mm": "#import <React/RCTBridgeModule.h>

@interface RCT_EXTERN_MODULE(ReactNativeMultiply, NSObject)

RCT_EXTERN_METHOD(multiply:(float)a withB:(float)b
                 withResolver:(RCTPromiseResolveBlock)resolve
                 withRejecter:(RCTPromiseRejectBlock)reject)

+ (BOOL)requiresMainQueueSetup
{
  return NO;
}

@end
",
  "/packages/repo-react-native-multiply/ios/ReactNativeMultiply.swift": "@objc(ReactNativeMultiply)
class ReactNativeMultiply: NSObject {

  @objc(multiply:withB:withResolver:withRejecter:)
  func multiply(a: Float, b: Float, resolve:RCTPromiseResolveBlock,reject:RCTPromiseRejectBlock) -> Void {
    resolve(a*b)
  }
}
",
  "/packages/repo-react-native-multiply/package.json": "{
  "name": "@repo/react-native-multiply",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "commonjs",
  "exports": {
    ".": {
      "import": {
        "types": "./lib/typescript/module/src/index.d.ts",
        "default": "./lib/module/index.js"
      },
      "require": {
        "types": "./lib/typescript/commonjs/src/index.d.ts",
        "default": "./lib/commonjs/index.js"
      }
    }
  },
  "main": "./lib/commonjs/index.js",
  "module": "./lib/module/index.js",
  "source": "./src/index.tsx",
  "files": [
    "src",
    "lib",
    "android",
    "ios",
    "cpp",
    "*.podspec",
    "react-native.config.json",
    "!ios/build",
    "!android/build",
    "!android/gradle",
    "!android/gradlew",
    "!android/gradlew.bat",
    "!android/local.properties",
    "!**/__tests__",
    "!**/__fixtures__",
    "!**/__mocks__",
    "!**/.*"
  ],
  "scripts": {
    "build": "bob build",
    "clean": "del-cli android/build example/android/build example/android/app/build example/ios/build lib",
    "prepare": "bob build",
    "test": "jest",
    "typecheck": "tsc"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "<rootDir>/example/node_modules",
      "<rootDir>/lib/"
    ],
    "preset": "react-native"
  },
  "devDependencies": {
    "@types/jest": "^29.5.5",
    "@types/react": "^18.2.44",
    "del-cli": "^5.1.0",
    "jest": "^29.7.0",
    "react": "18.3.1",
    "react-native": "0.75.4",
    "react-native-builder-bob": "^0.30.2",
    "typescript": "^5.6.3"
  },
  "peerDependencies": {
    "react": "*",
    "react-native": "*"
  },
  "packageManager": "pnpm@9.12.3",
  "react-native-builder-bob": {
    "source": "src",
    "output": "lib",
    "targets": [
      [
        "commonjs",
        {
          "esm": true
        }
      ],
      [
        "module",
        {
          "esm": true
        }
      ],
      [
        "typescript",
        {
          "project": "tsconfig.build.json",
          "esm": true
        }
      ]
    ]
  },
  "readme": "ERROR: No README data found!",
  "_id": "@repo/react-native-multiply@0.1.0"
}
",
  "/packages/repo-react-native-multiply/react_native_multiply.podspec": "require "json"

package = JSON.parse(File.read(File.join(__dir__, "package.json")))
folly_compiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -Wno-comma -Wno-shorten-64-to-32'

Pod::Spec.new do |s|
  s.name         = "react_native_multiply"
  s.version      = package["version"]
  s.summary      = package["description"]
  s.homepage     = package["homepage"]
  s.license      = package["license"]
  s.authors      = package["author"]

  s.platforms    = { :ios => min_ios_version_supported }
  #s.source       = { :git => "https://empty.git", :tag => "#{s.version}" }

  s.source_files = "ios/**/*.{h,m,mm,swift}"

  # Use install_modules_dependencies helper to install the dependencies if React Native version >=0.71.0.
  # See https://github.com/facebook/react-native/blob/febf6b7f33fdb4904669f99d795eba4c0f95d7bf/scripts/cocoapods/new_architecture.rb#L79.
  if respond_to?(:install_modules_dependencies, true)
    install_modules_dependencies(s)
  else
    s.dependency "React-Core"

    # Don't install the dependencies when we run \`pod install\` in the old architecture.
    if ENV['RCT_NEW_ARCH_ENABLED'] == '1' then
      s.compiler_flags = folly_compiler_flags + " -DRCT_NEW_ARCH_ENABLED=1"
      s.pod_target_xcconfig    = {
          "HEADER_SEARCH_PATHS" => "\\"$(PODS_ROOT)/boost\\"",
          "OTHER_CPLUSPLUSFLAGS" => "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1",
          "CLANG_CXX_LANGUAGE_STANDARD" => "c++17"
      }
      s.dependency "React-Codegen"
      s.dependency "RCT-Folly"
      s.dependency "RCTRequired"
      s.dependency "RCTTypeSafety"
      s.dependency "ReactCommon/turbomodule/core"
    end
  end
end
",
  "/packages/repo-react-native-multiply/src/__tests__/index.test.tsx": "it.todo('write a test');
",
  "/packages/repo-react-native-multiply/src/index.tsx": "import { NativeModules, Platform } from 'react-native';

const LINKING_ERROR =
  \`The package 'repo_react_native_multiply' doesn't seem to be linked. Make sure: \\n\\n\` +
  Platform.select({ ios: "- You have run 'pod install'\\n", default: '' }) +
  '- You rebuilt the app after installing the package\\n' +
  '- You are not using Expo Go\\n';

const ReactNativeMultiply = NativeModules.ReactNativeMultiply
  ? NativeModules.ReactNativeMultiply
  : new Proxy(
      {},
      {
        get() {
          throw new Error(LINKING_ERROR);
        },
      },
    );

export function multiply(a: number, b: number): Promise<number> {
  return ReactNativeMultiply.multiply(a, b);
}
",
  "/packages/repo-react-native-multiply/tsconfig.build.json": "{
  "extends": "./tsconfig",
  "exclude": ["example", "lib"]
}
",
  "/packages/repo-react-native-multiply/tsconfig.json": "{
  "compilerOptions": {
    "rootDir": ".",
    "paths": {
      "@repo/react-native-multiply": ["./src/index"]
    },
    "allowUnreachableCode": false,
    "allowUnusedLabels": false,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-jsx",
    "lib": ["ESNext"],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitUseStrict": false,
    "noStrictGenericChecks": false,
    "noUncheckedIndexedAccess": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ESNext",
    "verbatimModuleSyntax": true
  }
}
",
  "/pnpm-workspace.yaml": "packages:
  - apps/repo-myapp
  - packages/repo-react-native-multiply
  - packages/repo-my-lib-a
  - packages/repo-my-lib-b
  - packages/repo-my-lib-c
  - shared/repo-tsconfig
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/<%=it.repoName%>.podspec.eta": "require "json"

package = JSON.parse(File.read(File.join(__dir__, "package.json")))
folly_compiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -Wno-comma -Wno-shorten-64-to-32'

Pod::Spec.new do |s|
  s.name         = "<%=it.repoName%>"
  s.version      = package["version"]
  s.summary      = package["description"]
  s.homepage     = package["homepage"]
  s.license      = package["license"]
  s.authors      = package["author"]

  s.platforms    = { :ios => min_ios_version_supported }
  #s.source       = { :git => "https://empty.git", :tag => "#{s.version}" }

  s.source_files = "ios/**/*.{h,m,mm,swift}"

  # Use install_modules_dependencies helper to install the dependencies if React Native version >=0.71.0.
  # See https://github.com/facebook/react-native/blob/febf6b7f33fdb4904669f99d795eba4c0f95d7bf/scripts/cocoapods/new_architecture.rb#L79.
  if respond_to?(:install_modules_dependencies, true)
    install_modules_dependencies(s)
  else
    s.dependency "React-Core"

    # Don't install the dependencies when we run \`pod install\` in the old architecture.
    if ENV['RCT_NEW_ARCH_ENABLED'] == '1' then
      s.compiler_flags = folly_compiler_flags + " -DRCT_NEW_ARCH_ENABLED=1"
      s.pod_target_xcconfig    = {
          "HEADER_SEARCH_PATHS" => "\\"$(PODS_ROOT)/boost\\"",
          "OTHER_CPLUSPLUSFLAGS" => "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1",
          "CLANG_CXX_LANGUAGE_STANDARD" => "c++17"
      }
      s.dependency "React-Codegen"
      s.dependency "RCT-Folly"
      s.dependency "RCTRequired"
      s.dependency "RCTTypeSafety"
      s.dependency "ReactCommon/turbomodule/core"
    end
  end
end
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/build.gradle.eta": "buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["<%=it.moduleName%>_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["<%=it.moduleName%>_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["<%=it.moduleName%>_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "<%=it.packageName%>"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by \`com.facebook.react:react-android:$version\` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/gradle.properties.eta": "<%=it.moduleName%>_kotlinVersion=1.7.0
<%=it.moduleName%>_minSdkVersion=21
<%=it.moduleName%>_targetSdkVersion=31
<%=it.moduleName%>_compileSdkVersion=31
<%=it.moduleName%>_ndkversion=21.4.7075529
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/AndroidManifest.xml.eta": "<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="<%=it.packageName%>">
</manifest>
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/AndroidManifestNew.xml.eta": "<manifest xmlns:android="http://schemas.android.com/apk/res/android">
</manifest>
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/java/<%=it.packageFolder%>/<%=it.moduleName%>Module.kt.eta": "package <%=it.packageName%>

import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.facebook.react.bridge.Promise

class <%=it.moduleName%>Module(reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext) {

  override fun getName(): String {
    return NAME
  }

  // Example method
  // See https://reactnative.dev/docs/native-modules-android
  @ReactMethod
  fun multiply(a: Double, b: Double, promise: Promise) {
    promise.resolve(a * b)
  }

  companion object {
    const val NAME = "<%=it.moduleName%>"
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/android/src/main/java/<%=it.packageFolder%>/<%=it.moduleName%>Package.kt.eta": "package <%=it.packageName%>

import com.facebook.react.ReactPackage
import com.facebook.react.bridge.NativeModule
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.uimanager.ViewManager


class <%=it.moduleName%>Package : ReactPackage {
  override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {
    return listOf(<%=it.moduleName%>Module(reactContext))
  }

  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {
    return emptyList()
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/babel.config.js.eta": "module.exports = {
  presets: [
    ['module:react-native-builder-bob/babel-preset', { modules: 'commonjs' }],
  ],
};
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/ios/<%=it.moduleName%>-Bridging-Header.h.eta": "#import <React/RCTBridgeModule.h>
#import <React/RCTViewManager.h>
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/ios/<%=it.moduleName%>.mm.eta": "#import <React/RCTBridgeModule.h>

@interface RCT_EXTERN_MODULE(<%=it.moduleName%>, NSObject)

RCT_EXTERN_METHOD(multiply:(float)a withB:(float)b
                 withResolver:(RCTPromiseResolveBlock)resolve
                 withRejecter:(RCTPromiseRejectBlock)reject)

+ (BOOL)requiresMainQueueSetup
{
  return NO;
}

@end
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/ios/<%=it.moduleName%>.swift.eta": "@objc(<%=it.moduleName%>)
class <%=it.moduleName%>: NSObject {

  @objc(multiply:withB:withResolver:withRejecter:)
  func multiply(a: Float, b: Float, resolve:RCTPromiseResolveBlock,reject:RCTPromiseRejectBlock) -> Void {
    resolve(a*b)
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/package.json.eta": "{
  "name": "<%=it.name%>",
  "version": "<%=it.ctx.project.version%>",
  "description": "<%=it.ctx.project.description%>",
  "source": "./src/index.tsx",
  "main": "./lib/commonjs/index.js",
  "module": "./lib/module/index.js",
  "exports": {
    ".": {
      "import": {
        "types": "./lib/typescript/module/src/index.d.ts",
        "default": "./lib/module/index.js"
      },
      "require": {
        "types": "./lib/typescript/commonjs/src/index.d.ts",
        "default": "./lib/commonjs/index.js"
      }
    }
  },
  "files": [
    "src",
    "lib",
    "android",
    "ios",
    "cpp",
    "*.podspec",
    "react-native.config.json",
    "!ios/build",
    "!android/build",
    "!android/gradle",
    "!android/gradlew",
    "!android/gradlew.bat",
    "!android/local.properties",
    "!**/__tests__",
    "!**/__fixtures__",
    "!**/__mocks__",
    "!**/.*"
  ],
  "scripts": {
    "test": "jest",
    "typecheck": "tsc",
    "lint": "eslint \\"**/*.{js,ts,tsx}\\"",
    "clean": "del-cli android/build lib",
    "prepare": "bob build",
    "release": "release-it"
  },
  "keywords": [
    "react-native",
    "ios",
    "android"
  ],
  "license": "MIT",
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "devDependencies": {
    "@commitlint/config-conventional": "^17.0.2",
    "@evilmartians/lefthook": "^1.5.0",
    "@react-native/eslint-config": "^0.73.1",
    "@release-it/conventional-changelog": "^5.0.0",
    "@types/jest": "^29.5.5",
    "@types/react": "^18.2.44",
    "commitlint": "^17.0.2",
    "del-cli": "^5.1.0",
    "eslint": "^8.51.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "jest": "^29.7.0",
    "prettier": "^3.0.3",
    "react": "17.0.2",
    "react-native": "0.73.0",
    "react-native-builder-bob": "^0.30.3",
    "release-it": "^15.0.0",
    "turbo": "^1.10.7",
    "typescript": "^5.2.2"
  },
  "resolutions": {
    "@types/react": "^18.2.44"
  },
  "peerDependencies": {
    "react": "*",
    "react-native": "*"
  },
  "jest": {
    "preset": "react-native",
    "modulePathIgnorePatterns": [
      "<rootDir>/example/node_modules",
      "<rootDir>/lib/"
    ]
  },
  "eslintConfig": {
    "root": true,
    "extends": [
      "@react-native",
      "prettier"
    ],
    "rules": {
      "react/react-in-jsx-scope": "off",
      "prettier/prettier": [
        "error",
        {
          "quoteProps": "consistent",
          "singleQuote": true,
          "tabWidth": 2,
          "trailingComma": "es5",
          "useTabs": false
        }
      ]
    }
  },
  "eslintIgnore": [
    "node_modules/",
    "lib/"
  ],
  "prettier": {
    "quoteProps": "consistent",
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "useTabs": false
  },
  "react-native-builder-bob": {
    "source": "src",
    "output": "lib",
    "targets": [
      [
        "commonjs",
        {
          "esm": true
        }
      ],
      [
        "module",
        {
          "esm": true
        }
      ],
      [
        "typescript",
        {
          "project": "tsconfig.build.json",
          "esm": true
        }
      ]
    ]
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/src/__tests__/index.test.tsx.eta": "it.todo('write a test');
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/src/index.tsx.eta": "import { NativeModules, Platform } from 'react-native';

const LINKING_ERROR =
  \`The package 'repo_react_native_multiply' doesn't seem to be linked. Make sure: \\n\\n\` +
  Platform.select({ ios: "- You have run 'pod install'\\n", default: '' }) +
  '- You rebuilt the app after installing the package\\n' +
  '- You are not using Expo Go\\n';

const <%=it.moduleName%> = NativeModules.<%=it.moduleName%>
  ? NativeModules.<%=it.moduleName%>
  : new Proxy(
      {},
      {
        get() {
          throw new Error(LINKING_ERROR);
        },
      }
    );

export function multiply(a: number, b: number): Promise<number> {
  return <%=it.moduleName%>.multiply(a, b);
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/tsconfig.build.json.eta": "{
  "extends": "./tsconfig",
  "exclude": ["example", "lib"]
}",
  "/qdk/src/templates/monorepo/.qdk/components/templates/react-native-library/tsconfig.json.eta": "{
  "compilerOptions": {
    "rootDir": ".",
    "paths": {
      "<%=it.name%>": ["./src/index"]
    },
    "allowUnreachableCode": false,
    "allowUnusedLabels": false,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-jsx",
    "lib": ["ESNext"],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitUseStrict": false,
    "noStrictGenericChecks": false,
    "noUncheckedIndexedAccess": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ESNext",
    "verbatimModuleSyntax": true
  }
}
",
  "/qdk/src/templates/monorepo/.qdk/components/templates/templates.cts": "export const TEMPLATES_PATH = __dirname;
",
  "/shared/repo-tsconfig/.qdk/meta.json": "{
  "project": "@repo/tsconfig",
  "custom": {},
  "files": [
    "./.qdk/meta.json",
    "./.qdk/tree.txt",
    "./node.json",
    "./package.json",
    "./react-native.json"
  ],
  "subprojects": []
}
",
  "/shared/repo-tsconfig/.qdk/tree.txt": "·
└── NodeProject(@repo/tsconfig)
    ├── JsonFile(.qdk/meta.json)
    ├── PnpmPackageManager(9.12.3)
    ├── PackageJson
    │   └── JsonFile(package.json)
    ├── TsConfig
    │   └── TsConfigJsonFile(node.json)
    └── TsConfig
        └── TsConfigJsonFile(react-native.json)",
  "/shared/repo-tsconfig/node.json": "{
  "extends": ["@tsconfig/node20"]
}
",
  "/shared/repo-tsconfig/package.json": "{
  "name": "@repo/tsconfig",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "author": {
    "name": "Gabriel Moreira"
  },
  "type": "module",
  "scripts": {},
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@tsconfig/react-native": "9.9.9-mock-latest"
  },
  "packageManager": "pnpm@9.12.3",
  "readme": "ERROR: No README data found!",
  "_id": "@repo/tsconfig@0.1.0"
}
",
  "/shared/repo-tsconfig/react-native.json": "{
  "extends": ["@tsconfig/react-native"]
}
",
}
`;
